name: Windows-CUDA

on:
  push:
    branches: [ main, "gpu*" ]
  pull_request:
    branches: [ main, "gpu*" ]

jobs:
  build-windows-cuda:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Disable Test)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            cuda_crt: dynamic
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Static, Disable Test)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            cuda_crt: static
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    # Install CUDA to the runner's env
    - name: "Cache Restore: CUDA"
      uses: actions/cache@v2
      with:
        path: | 
          $(CUDA_CACHE_PATH)
          $(Pipeline.Workspace)/cache
      key: ${{ runner.os }}_cuda-${{ matrix.cuda }}
      env:
        CUDA_CACHE_PATH: $(Pipeline.Workspace)/cache-cuda
    - name: "Install: CUDA"
      env:
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
        CUDA_CACHE_PATH: $(Pipeline.Workspace)/cache-cuda
      shell: powershell
      run: |
        # @todo : Remove following command after debugging
        Get-Location
        Write-Output "$env:CUDA_CACHE_PATH"
        # Install CUDA via a powershell script
        .\.github\workflows\scripts\actions\install_cuda_windows.ps1
        if ($?) {
          # Set paths for subsequent steps, using $env:CUDA_PATH
          echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
          echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }
    - name: "Update: CUDA Cache"
      env:
        CUDA_CACHE_PATH: $(Pipeline.Workspace)/cache-cuda
      shell: powershell
      run: |
        New-Item -Force -Path "$env:CUDA_CACHE_PATH" -ItemType Directory
        Move-Item -Force -Path cuda_${{ matrix.cuda }}_win10_network.exe -Destination "${CUDA_CACHE_PATH}"
    # Check availability of nvcc, Nvidia CUDA Compiler
    - name: Check nvcc
      shell: powershell
      run: |
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include
    - name: Configure Build
      shell: powershell
      run: |
        if ("$env:CUDA_CRT" -eq "static") {
          $GTEST_SHARED="false"
        } else {
          $GTEST_SHARED="true"
        }
        Write-Warning "Google.Test CRT option can break CUDA build. Be cautious..."
        Write-Output "Using GTEST_SHARED: $($GTEST_SHARED)"
        New-Item -Type Directory -Name build -Force
        Push-Location build
          cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DUSE_CUDA=ON -DCUDA_CRT_LINKAGE="$env:CUDA_CRT" -DCMAKE_BUILD_TYPE=Release -Dgtest_force_shared_crt="$GTEST_SHARED" ..
        Pop-Location
      env:
        cuda_crt: ${{ matrix.cuda_crt }}
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build
      run: cd build && MSBuild.exe CubbyFlow.sln /p:Configuration=Release