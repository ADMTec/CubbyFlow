name: Windows-CUDA

on:
  push:
    branches: [ main, "gpu*" ]
  pull_request:
    branches: [ main, "gpu*" ]

jobs:
  build-windows-cuda:
    strategy:
      matrix:
        include:
          # Windows Server 2016 + Visual Studio 2017
          #- name: "Windows Server 2016 + Visual Studio 2017"
          #  os: windows-2016
          # Windows Server 2019 + Visual Studio 2019
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            cuda_crt: dynamic
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Static)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            cuda_crt: static

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true

    # Install CUDA to the runner's env
    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
      shell: powershell
      run: |
        # @todo : Remove following command after debugging
        pwd
        # Install CUDA via a powershell script
        .\.github\workflows\scripts\actions\install_cuda_windows.ps1
        if ($?) {
          # Set paths for subsequent steps, using $env:CUDA_PATH
          echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
          echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }

    # Check availability of nvcc, Nvidia CUDA Compiler
    - name: nvcc check
      shell: powershell
      run: |
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include
    - name: Configure Build
      shell: powershell
      run: |
        if ($env:CUDA_CRT -eq "static") {
          $GTEST_SHARED=$False
        } else {
          $GTEST_SHARED=$True
        }
        New-Item -Type Directory -Name build -Force
        Push-Location build
          cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DENABLE_CUDA=ON -DCUDA_CRT_LINKAGE="$env:CUDA_CRT" -DCMAKE_BUILD_TYPE=Release -Dgtest_force_shared_crt=$GTEST_SHARED ..
        Pop-Location
      env:
        cuda_crt: ${{ matrix.cuda_crt }}
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Build
      run: cd build && MSBuild.exe CubbyFlow.sln /p:Configuration=Release
    - name: Run Unit Test
      run: /a/CubbyFlow/CubbyFlow/build/bin/Release/UnitTests.exe
    - name: Run Python Test
      run: |
        pip install -r requirements.txt
        pip install .
        python -m pytest Tests/PythonTests/