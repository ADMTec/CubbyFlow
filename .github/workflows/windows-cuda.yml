name: Windows-CUDA

on:
  push:
    branches: [ main, "gpu*" ]
  pull_request:
    branches: [ main, "gpu*" ]

jobs:
  build-windows-cuda:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Disable Test)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            cuda_crt: dynamic
          - name: "Windows Server 2019 + Visual Studio 2019 + CUDA 11.3.1 (Static, Disable Test)"
            os: windows-2019
            cuda: "11.3.1"
            visual_studio: "Visual Studio 16 2019"
            cuda_crt: static
    env:
      CUDA_CACHE_ROOT: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA"
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    # Install CUDA to the runner's env
    - name: "Cache: CUDA"
      uses: actions/cache@v2
      with:
        path: "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA" # see CUDA_CACHE_ROOT
        key: ${{ matrix.os }}_cuda-${{ matrix.cuda }}
    # todo: work with https://github.com/marketplace/actions/cuda-toolkit
    - name: "Install/Check: CUDA"
      shell: powershell
      env:
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
      run: |
        Write-Output "$env:CUDA_CACHE_ROOT"
        if((Test-Path "$env:CUDA_CACHE_ROOT") -eq $False){
          # Install CUDA via a powershell script
          .\.github\workflows\scripts\actions\install_cuda_windows.ps1
        }
        $env:CUDA_PATH="$env:CUDA_CACHE_ROOT\\v11.3" # using fixed path
        $env:PATH="$env:CUDA_PATH\\bin;$env:PATH"
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include
    # - name: Configure Build
    #   shell: powershell
    #   run: |
    #     if ("$env:CUDA_CRT" -eq "static") {
    #       $GTEST_SHARED="false"
    #     } else {
    #       $GTEST_SHARED="true"
    #     }
    #     Write-Warning "Google.Test CRT option can break CUDA build. Be cautious..."
    #     Write-Output "Using GTEST_SHARED: $($GTEST_SHARED)"
    #     New-Item -Type Directory -Name build -Force
    #     Push-Location build
    #       cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DUSE_CUDA=ON -DCUDA_CRT_LINKAGE="$env:CUDA_CRT" -DCMAKE_BUILD_TYPE=Release -Dgtest_force_shared_crt="$GTEST_SHARED" ..
    #     Pop-Location
    #   env:
    #     cuda_crt: ${{ matrix.cuda_crt }}
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    # - name: Build
    #   run: cd build && MSBuild.exe CubbyFlow.sln /p:Configuration=Release